// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Volunteer {
    id                      String                      @default(cuid()) @id
    authId                  String                      @unique(map: "Volunteer_authId_unique_constraint")
    firstname               String
    lastname                String
    description             String?
    verificationStatus      String
    organization            String?
    avatarUrl               String
    cityIds                 String[]
    activityIds             String[]
    cities                  CitiesOnVolunteers[]
    activities              ActivitiesOnVolunteers[]
    social                  VolunteerSocial[]
    paymentOptions          VolunteerPaymentOption[]
    contacts                VolunteerContact[]
    createdAt               DateTime                    @default(now())
    hiddenAt                DateTime                    @default(now())
}

model CitiesOnVolunteers {
    volunteer               Volunteer    @relation(fields: [volunteerId], references: [id])
    volunteerId             String
    city                    City         @relation(fields: [cityId], references: [id])
    cityId                  String

    @@id([volunteerId, cityId])
}

model ActivitiesOnVolunteers {
    volunteer               Volunteer   @relation(fields: [volunteerId], references: [id])
    volunteerId             String
    activity                Activity    @relation(fields: [activityId], references: [id])
    activityId              String

    @@id([volunteerId, activityId])
}

model VolunteerSocial {
    id                      String                              @default(cuid()) @id
    url                     String
    providerIds             String[]
    providers               SocialProvidersOnVolunteerSocial[]
    volunteer               Volunteer                           @relation(fields: [volunteerId], references: [id])
    volunteerId             String
    deletedAt               DateTime?
}

model SocialProvidersOnVolunteerSocial {
    volunteerSocial         VolunteerSocial    @relation(fields: [volunteerSocialId], references: [id])
    volunteerSocialId       String
    socialProvider          SocialProvider     @relation(fields: [socialProviderId], references: [id])
    socialProviderId        String

    @@id([volunteerSocialId, socialProviderId])
}

model VolunteerPaymentOption {
    id                        String                          @default(cuid()) @id
    metadata                  Json
    providerIds               String[]
    paymentProviders          PaymentProvidersOnVolunteerPaymentOptions[]
    volunteer                 Volunteer                       @relation(fields: [volunteerId], references: [id])
    volunteerId               String
    deletedAt                 DateTime?
}

model PaymentProvidersOnVolunteerPaymentOptions {
    volunteerPaymentOption      VolunteerPaymentOption    @relation(fields: [volunteerPaymentOptionId], references: [id])
    volunteerPaymentOptionId    String
    paymentProvider             PaymentProvider           @relation(fields: [paymentProviderId], references: [id])
    paymentProviderId           String

    @@id([volunteerPaymentOptionId, paymentProviderId])
}

model VolunteerContact {
    id                      String                                  @default(cuid()) @id
    metadata                Json
    providerIds             String[]
    providers               VolunteerContactsOnContactProviders[]
    volunteer               Volunteer                               @relation(fields: [volunteerId], references: [id])
    volunteerId             String
    deletedAt               DateTime?
}

model VolunteerContactsOnContactProviders {
    volunteerContact            VolunteerContact    @relation(fields: [volunteerContactId], references: [id])
    volunteerContactId          String
    contactProvider             ContactProvider     @relation(fields: [contactProviderId], references: [id])
    contactProviderId           String

    @@id([volunteerContactId, contactProviderId])
}

model SocialProvider {
    id                      String    @default(cuid()) @id
    title                   String
    volunteerSocial         SocialProvidersOnVolunteerSocial[]
}

model PaymentProvider {
    id                      String    @default(cuid()) @id
    title                   String
    paymentOptions          PaymentProvidersOnVolunteerPaymentOptions[]
}

model ContactProvider {
    id                      String    @default(cuid()) @id
    title                   String
    contacts                VolunteerContactsOnContactProviders[]
}

model City {
    id                      String    @default(cuid()) @id
    title                   String
    adminName               String
    volunteers              CitiesOnVolunteers[]
}

model Activity {
    id                      String    @default(cuid()) @id
    title                   String
    description             String
    volunteers              ActivitiesOnVolunteers[]
}
